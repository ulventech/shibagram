{"version":3,"sources":["config.js","services/types.js","services/Shiba/reducers.js","services/reducers.js","api/endpoints/shiba.js","api/index.js","services/Shiba/sagas.js","services/sagas.js","services/store.js","pages/Shibas/components/Shiba.jsx","pages/Shibas/components/Shibas.jsx","pages/Shibas/index.jsx","services/Shiba/actions.js","pages/Shiba/index.jsx","routes.jsx","application/App.js","serviceWorker.js","index.js"],"names":["config","STAGE","process","API_BASE","SHIBA_GET_SHIBAS_REQUEST","SHIBA_GET_SHIBAS_SUCCESS","SHIBA_GET_SHIBAS_FAILURE","DEFAULT_STATE","shiba","shibas","isLoading","services_reducers","Shiba","state","arguments","length","undefined","action","type","Object","objectSpread","tasks","payload","_callee","queryParams","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","method","url","concat","qs","stringify","data","stop","this","endpoints_shiba","getShibas","api","getTasks","response","call","API","count","sent","map","o","id","shortid","generate","put","t0","console","error","_marked","sagas_callee","_context2","takeLatest","_marked2","services_sagas","middleware","sagaMiddleware","createSagaMiddleware","push","devTools","f","window","__REDUX_DEVTOOLS_EXTENSION__","log","enhancer","compose","applyMiddleware","apply","services_store","sagas","store","createStore","combineReducers","reducers","run","mark","configureSagaGenerator","all","saga","fork","Photo","styled","img","_templateObject","_this$props","props","react_default","createElement","Link","to","src","Component","Shibas","items","className","react_fontawesome_index_es","icon","size","spin","item","key","components_Shiba","Title","h1","Shibas_templateObject","_this$props$Shiba","role","aria-label","components_Shibas","mapDispatchToProps","connect","Container","div","Shiba_templateObject","_templateObject2","getShibaById","_this","filter","s","context","router","history","route","match","params","isEmpty","Shiba_Photo","contextTypes","PropTypes","shape","func","isRequired","string","Routes","Switch","Route","exact","path","component","library","add","faSyncAlt","App_templateObject","App","es","App_Container","BrowserRouter","routes","Boolean","location","hostname","ReactDOM","render","src_application_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAAeA,EAAA,CACXC,MAAOC,aACPC,SAAU,yECFDC,EAA2B,2BAC3BC,EAA2B,2BAC3BC,EAA2B,2BCIlCC,EAAgB,CAClBC,MAAO,GACPC,OAAQ,GACRC,WAAW,GCPAC,EAAA,CACXC,MDSW,WAAwC,IAAvCC,EAAuCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA/BP,EAAeU,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC5C,OAAQG,EAAOC,MACX,KAAKd,EAA0B,OAAOe,OAAAC,EAAA,EAAAD,CAAA,GAC/BN,EADwB,CAE3BQ,MAAO,GACPX,WAAW,IAEf,KAAKL,EAA0B,OAAOc,OAAAC,EAAA,EAAAD,CAAA,GAC/BN,EADwB,CAE3BJ,OAAQQ,EAAOK,QACfZ,WAAW,IAEf,KAAKJ,EAA0B,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GAC/BN,EADwB,CAE3BH,WAAW,IAEf,QAAS,OAAOG,2GExBxB,SAAAU,EAAyBC,GAAzB,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAG,OAAA,SACSC,IAAM,CACXC,OAAQ,MACRC,IAAG,GAAAC,OAAKnC,EAAOG,SAAZ,YAAAgC,OAA+BC,IAAGC,UAAUb,IAC/Cc,KAAM,MAJV,wBAAAV,EAAAW,SAAAhB,EAAAiB,gCAQe,IAAAC,EAAA,CACXC,uDCXWC,EAAAxB,OAAAC,EAAA,MACVZ,cCMKoC,iBAAV,SAAUA,IAAV,IAAAC,EAAAP,EAAA,OAAAb,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEyB,OAFzBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE+BgB,YAAKC,EAAIL,UAAW,CACvCM,MAAO,KAHnB,OASQ,OAPMH,EAFdjB,EAAAqB,KAKcX,EAAOO,EAASP,KAAKY,IAAI,SAACC,GAAD,MAAQ,CACnCC,GAAIC,IAAQC,WACZpB,IAAKiB,KAPjBvB,EAAAE,KAAA,EAScyB,YAAI,CACNrC,KAAMb,EACNiB,QAASgB,IAXrB,OAAAV,EAAAE,KAAA,gBAeQ,OAfRF,EAAAC,KAAA,EAAAD,EAAA4B,GAAA5B,EAAA,SAcQ6B,QAAQC,MAAR9B,EAAA4B,IAdR5B,EAAAE,KAAA,GAecyB,YAAI,CAAErC,KAAMZ,IAf1B,yBAAAsB,EAAAW,SAAAoB,EAAAnB,KAAA,SAmBe,SAAAoB,IAAA,OAAAnC,EAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OACX,OADW+B,EAAA/B,KAAA,EACLgC,YAAW1D,EAA0BwC,GADhC,wBAAAiB,EAAAtB,SAAAwB,EAAAvB,MC1BA,IAAAwB,EAAA,CACXpD,GCQAqD,EAAa,GAGXC,EAAiBC,cACvBF,EAAWG,KAAKF,GAIhB,IAAIG,EAAW,SAAAC,GAAC,OAAIA,GACC,gBAAjBtE,EAAOC,OAEHsE,QAAUA,OAAOC,+BAEjBH,EAAWE,OAAOC,8BAAgCD,OAAOC,+BACzDf,QAAQgB,IAAI,mCAIpB,IAAMC,EAAWC,YACbC,IAAeC,WAAf,EAAmBZ,GACnBI,GAGWS,EAAA,WACX,IA5BkBC,EA4BZC,EAAQC,YACVC,YAAgBC,GAChBT,GAMJ,OAFAR,EAAekB,KAlCGL,EAkCeA,EAlCVtD,EAAAC,EAAA2D,KAAI,SAAUC,IAAV,OAAA7D,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC3B,OAD2BF,EAAAE,KAAA,EACrByD,YAAIR,EAAM7B,IAAI,SAAAsC,GAAI,OAAIC,YAAKD,MADN,wBAAA5D,EAAAW,SAAU+C,EAAV9C,UAoCpBwC,8KCtCX,IAAMU,GAAQC,IAAOC,IAAVC,MAuBIjF,oLAXF,IAAAkF,EACetD,KAAKuD,MAAjB3C,EADH0C,EACG1C,GAAIlB,EADP4D,EACO5D,IAEZ,OACI8D,EAAAtE,EAAAuE,cAACC,EAAA,EAAD,CAAMC,GAAE,UAAAhE,OAAYiB,IAChB4C,EAAAtE,EAAAuE,cAACP,GAAD,CAAOU,IAAKlE,YAXRmE,aCoCLC,oLAjCF,IAAAR,EACwBtD,KAAKuD,MAA1BQ,EADHT,EACGS,MAAO7F,EADVoF,EACUpF,UAEf,OACIsF,EAAAtE,EAAAuE,cAAA,WACKvF,EACGsF,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,0CACXR,EAAAtE,EAAAuE,cAACQ,EAAA,EAAD,CACIC,KAAK,WACLC,KAAK,KACLC,MAAI,KAIZL,EAAMrD,IAAI,SAAC2D,GAAD,OACNb,EAAAtE,EAAAuE,cAAA,OACIa,IAAKD,EAAKzD,GACVoD,UAAU,OAEVR,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,6CACXR,EAAAtE,EAAAuE,cAACc,GAAD,CACI3D,GAAIyD,EAAKzD,GACTlB,IAAK2E,EAAK3E,kBA/BzBmE,kICErB,IAAMW,GAAQrB,IAAOsB,GAAVC,MAKLZ,gMAUF9D,KAAKuD,MAAMrD,6CAGJ,IAAAyE,EACkC3E,KAAKuD,MAAtCnF,MAASH,EADV0G,EACU1G,OAAQC,EADlByG,EACkBzG,UAEzB,OACEsF,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,aACbR,EAAAtE,EAAAuE,cAACe,GAAD,kBACYhB,EAAAtE,EAAAuE,cAAA,QAAMmB,KAAK,MAAMC,aAAW,sBAA5B,yCAEZrB,EAAAtE,EAAAuE,cAACqB,GAAD,CACEf,MAAO9F,EACPC,UAAWA,YAvBA2F,aAkCfkB,GAAqB,CACzB7E,UC3CuB,iBAAO,CAC5BxB,KAAMd,KD6CKoH,eARS,SAAA3G,GAAK,MAAK,CAChCD,MAAOC,EAAMD,QAOyB2G,GAAzBC,CAA6ClB,+OE3C5D,IAAMmB,GAAY9B,IAAO+B,IAAVC,MAITjC,GAAQC,IAAOC,IAAVgC,MAKLhH,8MA+BFiH,aAAe,SAACzE,GAEZ,OAD8B0E,EAAK/B,MAA3BnF,MAASH,OACHsH,OAAO,SAAAC,GAAC,OAAIA,EAAE5E,KAAOA,IAAI,IAAM,wFAPzCZ,KAAKuD,MAAMnF,MAAMH,OAAOM,QAAU,GAClCyB,KAAKyF,QAAQC,OAAOC,QAAQ/D,KAAK,sCAShC,IACyChB,EAAeZ,KAAKyF,QAA1DC,OAAUE,MAASC,MAASC,OAAUlF,GACxC5C,EAAQgC,KAAKqF,aAAazE,GAEhC,OACI4C,EAAAtE,EAAAuE,cAACwB,GAAD,CAAWjB,UAAU,aAChB+B,mBAAQ/H,GACLwF,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,OACXR,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,aACXR,EAAAtE,EAAAuE,cAAA,MAAIO,UAAU,eAAd,oCAMRR,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,OACXR,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,yBACXR,EAAAtE,EAAAuE,cAACuC,GAAD,CAAOpC,IAAK5F,EAAM0B,MAClB8D,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,WACAD,EAAAtE,EAAAuE,cAAA,OAAKO,UAAU,0CACXR,EAAAtE,EAAAuE,cAACC,EAAA,EAAD,CACIC,GAAG,IACHK,UAAU,mBAFd,qCAzDZH,aAAdzF,GAQK6H,aAAe,CAClBP,OAAQQ,KAAUC,MAAM,CACpBR,QAASO,KAAUC,MAAM,CACrBvE,KAAMsE,KAAUE,KAAKC,aACtBA,WACHT,MAAOM,KAAUC,MAAM,CACnBN,MAAOK,KAAUC,MAAM,CACnBL,OAAQI,KAAUC,MAAM,CACpBvF,GAAIsF,KAAUI,OAAOD,aACtBA,aACJA,aACJA,aACJA,YAoDX,IAIerB,eAJS,SAAA3G,GAAK,MAAK,CAC9BD,MAAOC,EAAMD,QAGF4G,CAAyB5G,IC3EzBmI,oLATP,OACI/C,EAAAtE,EAAAuE,cAAC+C,EAAA,EAAD,KACIhD,EAAAtE,EAAAuE,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9C,KACjCN,EAAAtE,EAAAuE,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWxI,aALrCyF,kGCMrBgD,IAAQC,IAAIC,KAEZ,IAAM9B,GAAY9B,IAAO+B,IAAV8B,MAgBAC,oLAZX,OACEzD,EAAAtE,EAAAuE,cAACyD,EAAA,EAAD,CAAU1E,MAAOA,KACfgB,EAAAtE,EAAAuE,cAAC0D,GAAD,KACE3D,EAAAtE,EAAAuE,cAAC2D,EAAA,EAAD,KACE5D,EAAAtE,EAAAuE,cAAC4D,GAAD,gBANMxD,aCJEyD,QACW,cAA7BvF,OAAOwF,SAASC,UAEe,UAA7BzF,OAAOwF,SAASC,UAEhBzF,OAAOwF,SAASC,SAAS3B,MACvB,2DCbN4B,IAASC,OAAOlE,EAAAtE,EAAAuE,cAACkE,GAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93960c35.chunk.js","sourcesContent":["export default {\n    STAGE: process.env.NODE_ENV || 'development',\n    API_BASE: 'https://us-central1-react-training-101.cloudfunctions.net/api',\n};\n","export const SHIBA_GET_SHIBAS_REQUEST = 'SHIBA_GET_SHIBAS_REQUEST';\nexport const SHIBA_GET_SHIBAS_SUCCESS = 'SHIBA_GET_SHIBAS_SUCCESS';\nexport const SHIBA_GET_SHIBAS_FAILURE = 'SHIBA_GET_SHIBAS_FAILURE';\n","import {\n    SHIBA_GET_SHIBAS_REQUEST,\n    SHIBA_GET_SHIBAS_SUCCESS,\n    SHIBA_GET_SHIBAS_FAILURE,\n} from '../types';\n\nconst DEFAULT_STATE = {\n    shiba: {},\n    shibas: [],\n    isLoading: false,\n};\n\nexport default (state = DEFAULT_STATE, action = {}) => {\n    switch (action.type) {\n        case SHIBA_GET_SHIBAS_REQUEST: return {\n            ...state,\n            tasks: [],\n            isLoading: true,\n        };\n        case SHIBA_GET_SHIBAS_SUCCESS: return {\n            ...state,\n            shibas: action.payload,\n            isLoading: false,\n        };\n        case SHIBA_GET_SHIBAS_FAILURE: return {\n            ...state,\n            isLoading: false,\n        };\n        default: return state;\n    }\n}\n","import Shiba from './Shiba/reducers';\n\nexport default {\n    Shiba,\n};\n","import axios from 'axios';\nimport qs from 'qs';\nimport config from '../../config';\n\nasync function getShibas(queryParams) {\n  return axios({\n    method: 'GET',\n    url: `${config.API_BASE}/shibes?${qs.stringify(queryParams)}`,\n    data: {},\n  });\n}\n\nexport default {\n    getShibas,\n};\n","import shiba from './endpoints/shiba';\n\nexport default {\n  ...shiba,\n};\n","import { takeLatest, call, put } from 'redux-saga/effects';\nimport shortid from 'shortid';\nimport API from '../../api';\nimport {\n    SHIBA_GET_SHIBAS_REQUEST,\n    SHIBA_GET_SHIBAS_SUCCESS,\n    SHIBA_GET_SHIBAS_FAILURE,\n} from '../types';\n\nfunction* getTasks() {\n    try {\n        const response = yield call(API.getShibas, {\n            count: 20,\n        });\n        const data = response.data.map((o) => ({\n            id: shortid.generate(),\n            url: o,\n        }));\n        yield put({\n            type: SHIBA_GET_SHIBAS_SUCCESS,\n            payload: data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({ type: SHIBA_GET_SHIBAS_FAILURE });\n    }\n}\n\nexport default function* () {\n    yield takeLatest(SHIBA_GET_SHIBAS_REQUEST, getTasks);\n};\n","import Shiba from './Shiba/sagas';\n\nexport default [\n    Shiba,\n];\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { all, fork } from 'redux-saga/effects';\nimport config from '../config';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst configureSaga = sagas => function* configureSagaGenerator() {\n    yield all(sagas.map(saga => fork(saga)));\n};\n\nlet middleware = [];\n\n// Create and add Redux Saga middleware\nconst sagaMiddleware = createSagaMiddleware();\nmiddleware.push(sagaMiddleware);\n\n// Dev tools like redux for chrome\n// Only run devtools in development mode.\nlet devTools = f => f;\nif (config.STAGE === 'development') {\n    // eslint-disable-next-line no-undef\n    if (window && window.__REDUX_DEVTOOLS_EXTENSION__) {\n        // eslint-disable-next-line no-undef\n        devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n        console.log('React and Redux DevTools is ON');\n    }\n}\n\nconst enhancer = compose(\n    applyMiddleware(...middleware),\n    devTools,\n);\n\nexport default () => {\n    const store = createStore(\n        combineReducers(reducers),\n        enhancer,\n    );\n\n    // Apply sagas\n    sagaMiddleware.run(configureSaga(sagas));\n\n    return store;\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Photo = styled.img`\n    width: 100%;\n    height: auto;\n    margin-bottom: 20px;\n`;\n\nclass Shiba extends Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        url: PropTypes.string.isRequired,\n    }\n\n    render() {\n        const { id, url } = this.props;\n \n        return (\n            <Link to={`/shiba/${id}`}>\n                <Photo src={url} />\n            </Link>\n        );\n    }\n}\n\nexport default Shiba;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Shiba from './Shiba';\n\nclass Shibas extends Component {\n    static propTypes = {\n        items: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            url: PropTypes.string.isRequired,\n        })).isRequired,\n        isLoading: PropTypes.bool.isRequired,\n    }\n\n    render() {\n        const { items, isLoading } = this.props;\n\n        return (\n            <div>\n                {isLoading ? (\n                    <div className=\"d-flex flex-row justify-content-center\">\n                        <FontAwesomeIcon\n                            icon=\"sync-alt\"\n                            size=\"5x\"\n                            spin\n                        />\n                    </div>\n                ) : (\n                    items.map((item) => (\n                        <div\n                            key={item.id}\n                            className=\"row\"\n                        >\n                            <div className=\"col-md-4 offset-md-4 col-lg-6 offset-lg-3\">\n                                <Shiba\n                                    id={item.id}\n                                    url={item.url}\n                                />\n                            </div>\n                        </div>\n                    ))\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Shibas;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { getShibas } from '../../services/Shiba/actions';\nimport ListOfShibas from './components/Shibas';\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-top: 20px;\n`;\n\nclass Shibas extends Component {\n  static propTypes = {\n    Shiba: PropTypes.shape({\n      shibas: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n      isLoading: PropTypes.bool.isRequired,\n    }).isRequired,\n    getShibas: PropTypes.func.isRequired,\n  }\n\n  componentWillMount() {\n    this.props.getShibas();\n  }\n\n  render() {\n    const { Shiba: { shibas, isLoading } } = this.props;\n \n    return (\n      <div className=\"container\">\n        <Title>\n          Shibagram <span role=\"img\" aria-label=\"dogs taking photos\">📸🐶❤️</span>\n        </Title>\n        <ListOfShibas\n          items={shibas}\n          isLoading={isLoading}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  Shiba: state.Shiba,\n});\n\nconst mapDispatchToProps = {\n  getShibas,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shibas);\n","import {\n    SHIBA_GET_SHIBAS_REQUEST,\n} from '../types';\n\nexport const getShibas = () => ({\n    type: SHIBA_GET_SHIBAS_REQUEST,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { isEmpty } from 'lodash';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    margin-top: 40px;\n`;\n\nconst Photo = styled.img`\n    width: 100%;\n    height: auto;\n`;\n\nclass Shiba extends Component {\n    static propTypes = {\n        Shiba: PropTypes.shape({\n            shibas: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n            isLoading: PropTypes.bool.isRequired,\n        }).isRequired,\n    }\n\n    static contextTypes = {\n        router: PropTypes.shape({\n            history: PropTypes.shape({\n                push: PropTypes.func.isRequired,\n            }).isRequired,\n            route: PropTypes.shape({\n                match: PropTypes.shape({\n                    params: PropTypes.shape({\n                        id: PropTypes.string.isRequired,\n                    }).isRequired,\n                }).isRequired,\n            }).isRequired,\n        }).isRequired,\n    }\n\n    componentWillMount() {\n        // Redirect back to home of we don't\n        // have a list of shibas in redux.\n        if (this.props.Shiba.shibas.length <= 0) {\n            this.context.router.history.push('/');\n        }\n    }\n\n    getShibaById = (id) => {\n        const { Shiba: { shibas } } = this.props;\n        return shibas.filter(s => s.id === id)[0] || {};\n    }\n\n    render() {\n        const { router: { route: { match: { params: { id } } } } } = this.context;\n        const shiba = this.getShibaById(id);\n\n        return (\n            <Container className=\"container\">\n                {isEmpty(shiba) ? (\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h3 className=\"text-center\">\n                                No shiba with this id found...\n                            </h3>\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"row\">\n                        <div className=\"col-md-10 offset-md-1\">\n                            <Photo src={shiba.url} />\n                            <br />\n                            <br />\n                            <div className=\"d-flex flex-row justify-content-center\">\n                                <Link\n                                    to=\"/\"\n                                    className=\"btn btn-primary\"\n                                >\n                                    Can I haz more shibas?\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </Container>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    Shiba: state.Shiba,\n});\n\nexport default connect(mapStateToProps)(Shiba);\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Shibas from './pages/Shibas';\nimport Shiba from './pages/Shiba';\n\nclass Routes extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" component={Shibas} />\n                <Route exact path=\"/shiba/:id\" component={Shiba} />\n            </Switch>\n        );\n    }\n}\n\nexport default Routes;\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\nimport store from '../services/store';\nimport Router from '../routes';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Add icons\nlibrary.add(faSyncAlt);\n\nconst Container = styled.div``;\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store()}>\n        <Container>\n          <BrowserRouter>\n            <Router />\n          </BrowserRouter>\n        </Container>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './application/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}